(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{159:function(a,e,n){"use strict";n.r(e);var t=n(0),o=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var a=this,e=a.$createElement,n=a._self._c||e;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"_1-简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-简介","aria-hidden":"true"}},[a._v("#")]),a._v(" 1-简介")]),a._v(" "),n("h2",{attrs:{id:"起源"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#起源","aria-hidden":"true"}},[a._v("#")]),a._v(" 起源")]),a._v(" "),n("p",[a._v("在Golang诞生前，Google的三大主力语言是C++、Java和Python，代码量非常之恐怖，编译速度、交叉编译、依赖、程序维护效率、项目迭代等问题都变得越来越棘手，那怎么办呢？不知道你有没有过碰到一个非常复杂的系统，复数的语言混杂，上面各种问题突出的情况？那么你肯定体会过那种无能为力的挫败感。是的，Google也会有这种挫败感。")]),a._v(" "),n("p",[a._v("所以，Google说，开发个新语言吧，于是就有了Golang（跪.jpg）。")]),a._v(" "),n("p",[a._v("这是Golang的作者之一Robert Griesemer发送给另外两名作者Rob Pike和Ken Thompson的邮件，这封邮件简单阐述了Golang最初的设计思想。")]),a._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("Date: Sun, 23 Sep 2007 23:33:41 -0700\nFrom: \"Robert Griesemer\" <gri@google.com>\nTo: \"Rob 'Commander' Pike\" <r@google.com>, ken@google.com\nSubject: prog lang discussion\n...\n*** General:\nStarting point: C, fix some obvious flaws, remove crud, add a few missing features\n  - no includes, instead: import\n  - no macros (do we need something instead?)\n  - ideally only one file instead of a .h and .c file, module interface\nshould be extracted automatically\n  - statements: like in C, though should fix 'switch' statement\n  - expressions: like in C, though with caveats (do we need ',' expressions?)\n  - essentially strongly typed, but probably w/ support for runtime types\n  - want arrays with bounds checking on always (except perhaps in 'unsafe mode'-see section on GC)\n  - mechanism to hook up GC (I think that most code can live w/ GC, but for a true systems\n    programming language there should be mode w/ full control over memory allocation)\n  - support for interfaces (differentiate between concrete, or implementation types, and abstract,\n    or interface types)\n  - support for nested and anonymous functions/closures (don't pay if not used)\n  - a simple compiler should be able to generate decent code\n  - the various language mechanisms should result in predictable code\n...\n")])])]),n("p",[a._v("可见，C语言对Golang的影响很多，除了C语言，还有另外两个语言分支对Golang的影响也很大，可以从下面这张Golang家谱完整的看出来。")]),a._v(" "),n("p",[n("img",{attrs:{src:"http://ww1.sinaimg.cn/large/6a43d05fly1fvkj6imcxgj20ls0g3gnt.jpg",alt:"Golang家谱"}})]),a._v(" "),n("p",[a._v("当然这些都是Golang的直系亲属，还有些旁系的：")]),a._v(" "),n("p",[n("img",{attrs:{src:"http://ww1.sinaimg.cn/large/6a43d05fly1fvkjeidpcyj20go0e0jse.jpg",alt:'Golang的各种"借鉴"'}})]),a._v(" "),n("p",[a._v("综上，Golang一来有Google这样的爸爸在撑腰，二来家族基因十分强大，三来有各种语言优秀特性的引入，都是其成为一个后起之秀的原因。而且Golang诞生晚，设计明确，它没有类似Java那样的一大堆历史包袱，也没有Python2、Python3那样的裂缝，更没有一些语言那样表面看似优雅底层实则乱七八糟的情况（逃。")]),a._v(" "),n("h2",{attrs:{id:"特点和槽点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#特点和槽点","aria-hidden":"true"}},[a._v("#")]),a._v(" 特点和槽点")]),a._v(" "),n("h3",{attrs:{id:"简单"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简单","aria-hidden":"true"}},[a._v("#")]),a._v(" 简单")]),a._v(" "),n("p",[a._v("Golang的一个设计宗旨，就是想把它打造成为一个简单、易学的语言。Golang现在确实是门相对简单的语言，当然代价也不少，舍弃了很多东西，这也是很多人不喜欢Golang的原因，不过，个人来看，目前的Golang够用且强大。")]),a._v(" "),n("h3",{attrs:{id:"速度快？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#速度快？","aria-hidden":"true"}},[a._v("#")]),a._v(" 速度快？")]),a._v(" "),n("p",[a._v("Golang虽然有C的基因，而且三位创始人都是C大牛，但Golang并没有C的执行速度，大体上和Java差不多，甚至很多情况下还没有Java快...虽说Java先编译再解释，但着实有点让Golang这个编译型语言汗颜。")]),a._v(" "),n("p",[a._v("当然，编译速度是可以一吹的。")]),a._v(" "),n("p",[a._v("另外，Golang由于语法简单明了，开发速度一定程度上会高一些，当然，这因人而异。")]),a._v(" "),n("h3",{attrs:{id:"规范"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#规范","aria-hidden":"true"}},[a._v("#")]),a._v(" 规范")]),a._v(" "),n("p",[a._v("由于Golang的一些设计，使得Golang代码写起来会比较规范，Golang设计时就希望强制代码风格，尽可能提高代码阅读效率以及减少不必要的纷争。轻松解决了大括号换行不换行之争。\n此外，Golang自带了gofmt工具，用于把代码格式化成官方的代码风格。终于不用copy或者看别人代码时还得格式化，也是个人觉得非常nice的一点。")]),a._v(" "),n("h3",{attrs:{id:"gc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gc","aria-hidden":"true"}},[a._v("#")]),a._v(" GC")]),a._v(" "),n("p",[a._v("早期Golang的GC可以说是非常糟糕了，被人骂惨了。\nGolang的GC采用的是STW（STOP THE WORLD）方案，顾名思义，就是到GC的时候，其他啥都停掉，GC完再接着之前的活，有些中大型应用STW可能会持续数秒，那还玩个卵啊。\n之后Golang团队花了大量时间去优化GC，优化到现在已经达到几毫秒级，而且仍旧在不断优化中。GC相关内容会在单独讲到。\n现在的Golang的GC已经没太多东西可喷了。")]),a._v(" "),n("h3",{attrs:{id:"并发并行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#并发并行","aria-hidden":"true"}},[a._v("#")]),a._v(" 并发并行")]),a._v(" "),n("p",[a._v("这大概是Golang最值得一提的地方了，也是其最吸引人的地方。\nGolang是从CSP分支传承下来的并发模型，并且在语法层面支持，而且极大地简化了并发编程的开发，开发起来简直轻松加愉快。\nGolang并发使用的是非常轻量级的线程，称为 "),n("code",[a._v("goruntine")]),a._v(" ，创建 "),n("code",[a._v("goruntine")]),a._v(" 的开销非常小，所以随便创建上百万个 "),n("code",[a._v("goruntine")]),a._v(" 也不在话下，后续估计会花很多篇幅说Golang的并发和并行。")]),a._v(" "),n("h3",{attrs:{id:"错误处理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#错误处理","aria-hidden":"true"}},[a._v("#")]),a._v(" 错误处理")]),a._v(" "),n("p",[a._v("如果你看别人的Golang源码，看到满篇的 "),n("code",[a._v("if err != nil")]),a._v(" 或者一些 "),n("code",[a._v("checkErr")]),a._v(" 方法，请不要惊慌，是的，Golang的错误处理就是这么“操蛋”，一开始我也被吓到了，总是在怀疑是不是我哪里搞错了。之所以这样，是因为在Golang里，"),n("code",[a._v("Errors are values")]),a._v(" 。\n反正Golang的错误处理是我对其最大的槽点，据说Go2要改进，先忍了吧。")]),a._v(" "),n("h3",{attrs:{id:"标准库"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#标准库","aria-hidden":"true"}},[a._v("#")]),a._v(" 标准库")]),a._v(" "),n("p",[a._v("Golang的标准库很强大，覆盖范围也很广，官方出品，注释也非常详细，很多小程序基本上调调标准库就行了。而且标准库大多都实现的很好，如果有了一定Golang基础想要提高，读读标准库是非常有益的。")])])}],!1,null,null,null);o.options.__file="1-简介.md";e.default=o.exports}}]);